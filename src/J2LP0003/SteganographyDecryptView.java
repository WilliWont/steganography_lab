/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package J2LP0003;

import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.io.File;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.filechooser.FileNameExtensionFilter;
import mdlaf.MaterialLookAndFeel;

/**
 *
 * @author Will
 */
public class SteganographyDecryptView extends javax.swing.JFrame {
    
    final int COLOR_BIT = 8;
    
    //this counts from zero, so amount is actually 3
    final int COLOR_CHANNELS = 2;
    
    private final Graphics enImage;
    private BufferedImage encryptedImage;
    
    public SteganographyDecryptView() {
        initComponents();
        enImage = pnlEN.getGraphics();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        txtAddr = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        btnBrowse = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        pnlEN = new javax.swing.JPanel();
        btnDecrypt = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtMsg = new javax.swing.JTextArea();
        btnSave = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        txtAddr.setFont(new java.awt.Font("Roboto", 0, 18)); // NOI18N
        txtAddr.setEnabled(false);

        jLabel1.setFont(new java.awt.Font("Roboto", 1, 18)); // NOI18N
        jLabel1.setText("Image Address:");

        jLabel2.setBackground(new java.awt.Color(40, 40, 40));
        jLabel2.setFont(new java.awt.Font("Raleway Black", 1, 48)); // NOI18N
        jLabel2.setText("STEGANOGRAPHY DECRYPTION");

        jLabel3.setFont(new java.awt.Font("Roboto", 1, 18)); // NOI18N
        jLabel3.setText("Encryption Text:");

        btnBrowse.setFont(new java.awt.Font("Roboto", 1, 18)); // NOI18N
        btnBrowse.setText("Browse");
        btnBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrowseActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Roboto", 1, 18)); // NOI18N
        jLabel6.setText("Encrypted Image:");

        pnlEN.setBackground(new java.awt.Color(238, 238, 238));

        javax.swing.GroupLayout pnlENLayout = new javax.swing.GroupLayout(pnlEN);
        pnlEN.setLayout(pnlENLayout);
        pnlENLayout.setHorizontalGroup(
            pnlENLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 478, Short.MAX_VALUE)
        );
        pnlENLayout.setVerticalGroup(
            pnlENLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 358, Short.MAX_VALUE)
        );

        btnDecrypt.setFont(new java.awt.Font("Roboto", 1, 18)); // NOI18N
        btnDecrypt.setText("Decrypt");
        btnDecrypt.setEnabled(false);
        btnDecrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDecryptActionPerformed(evt);
            }
        });

        txtMsg.setEditable(false);
        txtMsg.setColumns(20);
        txtMsg.setLineWrap(true);
        txtMsg.setRows(5);
        jScrollPane1.setViewportView(txtMsg);

        btnSave.setFont(new java.awt.Font("Roboto", 1, 18)); // NOI18N
        btnSave.setText("Save");
        btnSave.setEnabled(false);

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(mainPanelLayout.createSequentialGroup()
                                        .addComponent(jLabel6)
                                        .addGap(337, 337, 337)
                                        .addComponent(jLabel3))
                                    .addGroup(mainPanelLayout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addGap(12, 12, 12)
                                        .addComponent(txtAddr, javax.swing.GroupLayout.PREFERRED_SIZE, 378, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(btnBrowse)))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(btnDecrypt)
                                    .addComponent(pnlEN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(mainPanelLayout.createSequentialGroup()
                                        .addGap(0, 337, Short.MAX_VALUE)
                                        .addComponent(btnSave))
                                    .addComponent(jScrollPane1)))))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addComponent(jLabel2)
                        .addGap(0, 45, Short.MAX_VALUE)))
                .addContainerGap())
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtAddr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(btnBrowse))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1)
                    .addComponent(pnlEN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDecrypt)
                    .addComponent(btnSave)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(56, Short.MAX_VALUE)
                .addComponent(mainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(56, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(16, Short.MAX_VALUE)
                .addComponent(mainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(15, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // https://stackoverflow.com/questions/3514158/how-do-you-clone-a-bufferedimage
    private BufferedImage deepCopy(BufferedImage bi) {
//        ColorModel cm = bi.getColorModel();
//        boolean isAlphaPremultiplied = cm.isAlphaPremultiplied();
//        WritableRaster raster = bi.copyData(null);
//        return new BufferedImage(cm, raster, isAlphaPremultiplied, null);
        BufferedImage newImage = new BufferedImage(bi.getWidth(),bi.getHeight(),BufferedImage.TYPE_3BYTE_BGR);
        newImage.getGraphics().drawImage(bi, 0, 0, null);
//        return new BufferedImage(bi.getWidth(),bi.getHeight(),BufferedImage.TYPE_3BYTE_BGR);
        return newImage;
    }
    
    private void btnBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowseActionPerformed
        JFileChooser f = new JFileChooser();

        FileNameExtensionFilter filter =
        new FileNameExtensionFilter("Image files","JPG","BMP","PNG","GIF");

        f.setFileFilter(filter);

        int returnVal = f.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION)
        {
            txtAddr.setText(f.getSelectedFile().getAbsolutePath());
            encryptedImage = loadImg(txtAddr.getText());
            showImage(enImage,pnlEN,encryptedImage);
            btnSave.setEnabled(false);
            btnDecrypt.setEnabled(true);
        }
    }//GEN-LAST:event_btnBrowseActionPerformed

    private void btnDecryptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDecryptActionPerformed
        txtMsg.setText(decryptLSB(encryptedImage));
    }//GEN-LAST:event_btnDecryptActionPerformed

    private BufferedImage loadImg(String addr)
    {
        if (addr == null || addr.isEmpty()){
            JOptionPane.showMessageDialog(this, "Image Address unavailable, please try again");
            return null;
        }

        try
        {
            System.out.println("ADDR: " + addr);
            File f = new File(addr);
            BufferedImage in = ImageIO.read(f);
            System.out.println("IMAGETYPE_BEF: " + in.getType());
            if(in.getType()!=5){
                BufferedImage newImage = new BufferedImage(in.getWidth(), in.getHeight(), BufferedImage.TYPE_3BYTE_BGR);
                newImage.getGraphics().drawImage(in, 0, 0, null);
                System.out.println("IMAGETYPE_AFT: " + in.getType());
                in = newImage;
            }
            return in;
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(this,e);
        }
        return null;
    }
    
    private boolean showImage(Graphics showTo, JPanel showPanel, BufferedImage img)
    {
        //System.out.println("Start showImg");
        int x = 1, y = 1;
        BufferedImage curImg = img;
        System.out.println("After loadImg");
        if (curImg != null)
        {
            System.out.println("Bef Clear");
            showTo.clearRect(x,y,showPanel.getWidth()-2*x,showPanel.getHeight()-2*y);
       
            int imgWidth = curImg.getWidth();
            int imgHeight = curImg.getHeight();
            
            double ratio = 1.0*imgWidth/imgHeight;
            
            int areaWidth = showPanel.getWidth()-2*x;
            int areaHeight = showPanel.getHeight()-2*y;
            
            if (imgWidth <= areaWidth && imgHeight <= areaHeight)
            {
                if(imgWidth > imgHeight){
                    areaHeight = (int)(areaWidth/ratio);
                } else {
                    areaWidth = (int)(areaHeight*ratio);
                }
            } else if (imgWidth > imgHeight)
            {
                if (imgWidth < areaWidth) {
                    areaWidth = imgWidth;
                }
                areaHeight = (int)(areaWidth/ratio);
            } else {
                if (imgHeight < areaHeight){
                    areaHeight = imgHeight;
                }
                areaWidth = (int) (areaHeight*ratio);
            }
            showTo.drawImage(curImg,x,y,areaWidth,areaHeight,showPanel);
            System.out.println("End showImg Successfully");
            return true;
        }
        System.out.println("End showImg Unsuccessfully");
        return false;
    }
    
    private int getCharacterBit(BufferedImage img)
    {
        int pixel = img.getRGB(0,0);
        StringBuilder sb = new StringBuilder();
        sb.append((char) (((pixel >> 0) & 1) + 48));
        sb.append((char) (((pixel >> 8) & 1) + 48));
        sb.append((char) (((pixel >> 16) & 1) + 48));
        int type = Integer.parseInt(sb.toString());
        switch(type){
            case 1:
                return 16;
            default:
                return 8;
        }
    }
    
    private int getCompressionType(BufferedImage img)
    {
        int pixel = img.getRGB(0,0);
        StringBuilder sb = new StringBuilder();
        sb.append((char) (((pixel >> 0) & 1) + 48));
        sb.append((char) (((pixel >> 8) & 1) + 48));
        sb.append((char) (((pixel >> 16) & 1) + 48));
        int type = Integer.parseInt(sb.toString());
        return type;
    }
    
    private String decryptLSB(BufferedImage img)
    {
        int x = img.getWidth();
        int y = img.getHeight();
        
        BufferedImage imgToDecrypt = deepCopy(img);
        
        int characterBit = getCharacterBit(imgToDecrypt);
        int compressionType = getCompressionType(imgToDecrypt);
        
        int curCol = 2;
        int curRow = 0;
        
        int consecutiveZero = 0;
        int consecutiveBit = 0;
        int curColor = 0;
        
        StringBuilder ogMsg = new StringBuilder();

        int pixel = imgToDecrypt.getRGB(curCol, curRow);
//        int count = 0;
        StringBuilder msg = new StringBuilder();
        
        while(curRow < y && curCol < x){
            char c = (char) (((pixel >> curColor) & 1) + 48);

            consecutiveBit++;
            consecutiveBit %= (characterBit);
            
            ogMsg.append(c);
            
            if(consecutiveBit == 0){
                int parseInt = Integer.parseInt(ogMsg.toString(), 2);
                char msgC = (char)parseInt;
                msg.append(msgC);
                ogMsg = new StringBuilder();
            }
            
            if(c=='0')
                consecutiveZero++;
            else
                consecutiveZero = 0;
            
            if(consecutiveZero >= characterBit && consecutiveBit == 0){
                System.out.println("BREAKCONDITION");
                break;   
            }
            
            curColor += characterBit;
            
            if(curColor > COLOR_BIT*COLOR_CHANNELS){
                curColor = 0;
                curCol++;
                
            if(curCol >= x){
                curCol = 0;
                curRow++;
            }
            
//            System.out.println("RGBTOGET: " + curCol + ", " + curRow);
            if(curRow < y)
                pixel = imgToDecrypt.getRGB(curCol, curRow);
            }
            
        }
        
//        System.out.println("aft: " + ogMsg);
        
        return msg.toString();
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
       try {
                UIManager.setLookAndFeel (new MaterialLookAndFeel ());
            }
            catch (UnsupportedLookAndFeelException e) {
                    e.printStackTrace ();
            }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SteganographyDecryptView().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBrowse;
    private javax.swing.JButton btnDecrypt;
    private javax.swing.JButton btnSave;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JPanel pnlEN;
    private javax.swing.JTextField txtAddr;
    private javax.swing.JTextArea txtMsg;
    // End of variables declaration//GEN-END:variables
}
